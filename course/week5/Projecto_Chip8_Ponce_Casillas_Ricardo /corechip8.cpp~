#include "corechip8.h"
#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <time.h>

using namespace std;

CoreChip8::CoreChip8(){

    init();  
    srand(time(NULL));

}

CoreChip8::~CoreChip8(){

}

void CoreChip8::init(){

    PC          = 0x200;
    I           = 0;
    SP          = 0;
    Opcode      = 0;  
    Delay_Timer = 0;
    Sound_Timer = 0;

    for(int i = 0; i < 16; i++)   V[i]      = 0;
    for(int i = 0; i < 16; i++)   Keys[i]   = 0;
    for(int i = 0; i < 16; i++)   Stack[i]  = 0;
    for(int i = 0; i < 4096; i++) Memory[i] = 0;
    for(int y = 0; y < 32; y++)
        for(int x = 0; x < 64; x++)
            Screen[x][y] = 0;

    unsigned char Font[16*5] = {
            0xF0, 0x90, 0x90, 0x90, 0xF0,	// 0
            0x20, 0x60, 0x20, 0x20, 0x70,	// 1
	    0xF0, 0x10, 0xF0, 0x80, 0xF0,	// 2
	    0xF0, 0x10, 0xF0, 0x10, 0xF0,	// 3
	    0x90, 0x90, 0xF0, 0x10, 0x10,	// 4
	    0xF0, 0x80, 0xF0, 0x10, 0xF0,	// 5
	    0xF0, 0x80, 0xF0, 0x90, 0xF0,	// 6
	    0xF0, 0x10, 0x20, 0x40, 0x40,	// 7
	    0xF0, 0x90, 0xF0, 0x90, 0xF0,	// 8
	    0xF0, 0x90, 0xF0, 0x10, 0xF0,	// 9
	    0xF0, 0x90, 0xF0, 0x90, 0x90,	// A
            0xE0, 0x90, 0xE0, 0x90, 0xE0,	// B
	    0xF0, 0x80, 0x80, 0x80, 0xF0,	// C
	    0xE0, 0x90, 0x90, 0x90, 0xE0,	// D
	    0xF0, 0x80, 0xF0, 0x80, 0xF0,	// E
	    0xF0, 0x80, 0xF0, 0x80, 0x80	// F
            };

    for(int i = 0; i < 16*5; i++) Memory[i] = Font[i];

}

void CoreChip8::DecrementTimers(){

	if (Delay_Timer > 0)
		--Delay_Timer;

	if (Sound_Timer > 0)
		--Sound_Timer;
}

void CoreChip8::FDXemulate(){

    Opcode = (Memory[PC] << 8) | (Memory[PC+1]);
    PC += 2;

    switch (Opcode & 0xF000){
    
            case 0x0000: switch (Opcode & 0x000F){
                                 
                                 case 0x0000: //0x00E0-Clear
                                      for(int y = 0; y < 32; y++)
                                          for(int x = 0; x < 64; x++)
                                              Screen[x][y] = 0;
                                 break;

                                 case 0x000E: //0x00EE-Ret   
                                      PC = Stack[--SP];
                                 break;

                                 default: cerr << "Unknow Opcode\n" <<"0x" << hex << Opcode <<endl; 
                         }
            break;

            case 0x1000: //0x1NNN-Call addr
                 PC = Opcode & 0x0FFF;
            break;

            case 0x2000: //0x2NNN-Call sub
                 Stack[SP++] = PC;
                 PC = Opcode & 0x0FFF;
            break;

            case 0x3000: //0x3XKK-Skip.eq Vx, value
                 if(V[((Opcode & 0x0F00)>>8)] == (Opcode & 0x00FF)) PC += 2;
            break;

            case 0x4000: //
                 if(V[((Opcode & 0x0F00)>>8)] != (Opcode & 0x00FF)) PC += 2;
            break;

            case 0x5000: //
                 if(V[((Opcode & 0x0F00)>>8)] == V[((Opcode & 0x00F0)>>4)]) PC +=2;
            break;

            case 0x6000: //
                 V[((Opcode & 0x0F00)>>8)] = Opcode & 0x00FF;
            break;

            case 0x7000: //
                 V[((Opcode & 0x0F00)>>8)] += Opcode & 0x00FF;
            break;

            case 0x8000: switch (Opcode & 0x000F){
                         
                                 case 0x0000: //
                                      V[((Opcode & 0x0F00)>>8)] = V[((Opcode & 0x00F0)>>4)];
                                 break;

                                 case 0x0001: //
                                      V[((Opcode & 0x0F00)>>8)] |= V[((Opcode & 0x00F0)>>4)];
                                 break;

                                 case 0x0002: //
                                      V[((Opcode & 0x0F00)>>8)] &= V[((Opcode & 0x00F0)>>4)];
                                 break;

                                 case 0x0003: //
                                      V[((Opcode & 0x0F00)>>8)] ^= V[((Opcode & 0x00F0)>>4)];
                                 break;

                                 case 0x0004: //
				      if (V[((Opcode & 0x00F0) >> 4)] > (0xFF - V[((Opcode & 0x0F00) >> 8)])) 
                                          V[0xF] = 1; 
				      else V[0xF] = 0;					
				      V[((Opcode & 0x0F00) >> 8)] += V[((Opcode & 0x00F0) >> 4)];
                                 break;

                                 case 0x0005: //
                                      if (V[((Opcode & 0x00F0) >> 4)] > (V[((Opcode & 0x0F00) >> 8)])) 
				          V[0xF] = 0;
				      else V[0xF] = 1;					
				      V[((Opcode & 0x0F00) >> 8)] -= V[((Opcode & 0x00F0) >> 4)];
                                 break;

                                 case 0x0006: //
			              V[0xF] = V[((Opcode & 0x0F00)>>8)] & 0x1;
				      V[((Opcode & 0x0F00)>>8)] >>= 1;
                                 break;

                                 case 0x0007: //
                                      if (V[((Opcode & 0x00F0)>>4)] > V[((Opcode & 0x0F00)>>8)])
				          V[0xF] = 1;
					else V[0xF] = 0;
                                      V[((Opcode & 0x0F00)>>8)] = V[((Opcode & 0x00F0)>>4)] - V[((Opcode & 0x0F00)>>8)];
                                 break;

                                 case 0x000E: //
				      V[0xF] = (V[((Opcode & 0x0F00)>>8)] >> 7) & 0x01;
				      V[((Opcode & 0x0F00)>>8)] <<= 1;
                                 break;

                                 default: cerr << "Unknow Opcode\n" <<"0x" << hex << Opcode <<endl; 

                         }
            break;
 
            case 0x9000: //
                 if (V[((Opcode & 0x0F00)>>8)] != V[((Opcode & 0x00F0)>>4)]) PC += 2;
            break;

            case 0xA000: //
	         I = Opcode & 0x0FFF;
            break;

            case 0xB000: //
                 PC = (Opcode & 0x0FFF) + V[0];
            break;

            case 0xC000: //
                 V[((Opcode & 0x0F00) >> 8)] = (rand() % 0xFF) & (Opcode & 0x00FF);
            break;

            case 0xD000: //
                 {
		     unsigned short x = V[((Opcode & 0x0F00) >> 8)];
		     unsigned short y = V[((Opcode & 0x00F0) >> 4)];
		     unsigned short height = Opcode & 0x000F;

                     int ands[8] = { 128, 64, 32, 16, 8, 4, 2, 1 };
                     V[0xF] = 0;

                     for (int yline = 0; yline < height; yline++){
		       	  for(int xline = 0; xline < 8; xline++){

		              if (x + xline == 64) x = -xline;
			      if (y + yline == 32) y = -yline;

			      if (Screen[x + xline][y + yline] == 1 && ((Memory[I + y] & ands[xline]) >> (8 - xline - 1)) == 1) V[0xF] = 1;

			      Screen[x + xline][y + yline] = Screen[x + xline][y + yline] ^ ((Memory[I + yline] & ands[xline]) >> (8 - xline - 1));
                              }

				x = V[((Opcode & 0x0F00) >> 8)];
				y = V[((Opcode & 0x00F0) >> 4)];
}
					
		   /*  unsigned short pixel;
                   
                     V[0xF] = 0;
                     for (int yline = 0; yline < height; yline++){
			  pixel = Memory[I + yline];
		       	  for(int xline = 0; xline < 8; xline++){
			      if((pixel & (0x80 >> xline)) != 0){
                                 if ((x + xline) < 64 && (y + yline) < 32 && (x + xline) >= 0 && (y + yline) >= 0){
                                     if (Screen[(x + xline)*2][(y + yline)*2] == 1) V[0xF] = 1;
		     		     Screen[(x + xline)*2][(y + yline)*2] ^= 1;
				     Screen[(x + xline)*2 + 1][(y + yline)*2] ^= 1;
				     Screen[(x + xline)*2][(y + yline)*2 + 1] ^= 1;
		     		     Screen[(x + xline)*2 + 1][(y + yline)*2 + 1] ^= 1;
                                 }
                              }
                          }
                      }*/
                 }
            break;

            case 0xE000: switch (Opcode & 0x00FF){
                                 
                                 case 0x009E: //
				      if (Keys[V[((Opcode & 0x0F00)>>8)]] == 1) PC += 2;
                                 break;

                                 case 0x00A1: //
                                      if (Keys[V[((Opcode & 0x0F00)>>8)]] != 1) PC += 2;
                                 break;

                                 default: cerr << "Unknow Opcode\n" <<"0x" << hex << Opcode <<endl;
                         }
            break;

            case 0xF000: switch (Opcode & 0x00FF){
                                 
                                 case 0x0007: //
                                      V[((Opcode & 0x0F00) >> 8)] = Delay_Timer;
                                 break;

                                 case 0x000A: //
                                      PC -= 2;
                                      for (unsigned char i = 0; i < 16; i++){
                                           if (Keys[i] == 1){
                                               V[((Opcode & 0x0F00)>>8)] = i;
							PC += 2;
                                           }
                                      }
                                      
                                 break;

                                 case 0x0015: //
                                      Delay_Timer = V[((Opcode & 0x0F00) >> 8)];
                                 break;

                                 case 0x0018: //
                                      Sound_Timer = V[((Opcode & 0x0F00) >> 8)];
                                 break;

                                 case 0x001E: //
                                      if ((I += V[((Opcode & 0x0F00) >> 8)]) > 0xFFF ) V[0xF] = 1;
                                      else V[0xF] = 0;
                                 break;

                                 case 0x0029: //
				      I = V[(Opcode & 0x0F00) >> 8] * 0x5;
                                 break;

                                 case 0x0033: //
				      Memory[I]     = V[((Opcode & 0x0F00) >> 8)] / 100;
				      Memory[I + 1] = (V[((Opcode & 0x0F00) >> 8)] / 10) % 10;
				      Memory[I + 2] = (V[((Opcode & 0x0F00) >> 8)] % 100) % 10;	

                                 break;

                                 case 0x0055: //
				      for (int i = 0; i <= ((Opcode & 0x0F00) >> 8); ++i) Memory[I + i] = V[i];	
				      I += ((Opcode & 0x0F00) >> 8) + 1;

                                 break;

                                 case 0x0065: //
 				      for (int i = 0; i <= ((Opcode & 0x0F00) >> 8); ++i) V[i] = Memory[I + i];
				      I += ((Opcode & 0x0F00) >> 8) + 1;
                                 break;

                                 default: cerr << "Unknow Opcode\n" <<"0x" << hex << Opcode <<endl;
                         }
            break;

            default: cout << "Unknow Opcode\n" <<"0x" << hex << Opcode <<endl;             
    }

}

bool CoreChip8::LoadGame(const char *filename){

    streampos size = 0;
    ifstream file(filename, ios::in | ios::binary | ios::ate);

    if (file.is_open()){
        size = file.tellg();
	if (size > 0x0FFF - 0x200){
	     cerr << "Error: file " << endl;
	     return false;
	    }
	file.seekg(0, ios::beg);
	file.read(reinterpret_cast<char*>(&Memory[0x200]), size);
	file.close();
	cout << " loaded" << endl;
	return true;
    }

    cerr << "Error: unable to open file '" << filename << "'" << endl;
    return false;
}


